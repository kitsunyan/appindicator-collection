--- a/src/app-indicator.c
+++ b/src/app-indicator.c
@@ -75,6 +75,9 @@
 	gchar                *icon_theme_path;
 	DbusmenuServer       *menuservice;
 	GtkWidget            *menu;
+	gboolean              item_is_menu;
+	GtkWidget            *activate_target;
+	gboolean              activate_enabled;
 	GtkWidget            *sec_activate_target;
 	gboolean              sec_activate_enabled;
 	guint32               ordering_index;
@@ -181,7 +184,7 @@
 static GtkStatusIcon * fallback (AppIndicator * self);
 static void status_icon_status_wrapper (AppIndicator * self, const gchar * status, gpointer data);
 static gboolean scroll_event_wrapper(GtkWidget *status_icon, GdkEventScroll *event, gpointer user_data);
-static gboolean middle_click_wrapper(GtkWidget *status_icon, GdkEventButton *event, gpointer user_data);
+static gboolean left_middle_click_wrapper(GtkWidget *status_icon, GdkEventButton *event, gpointer user_data);
 static void status_icon_changes (AppIndicator * self, gpointer data);
 static void status_icon_activate (GtkStatusIcon * icon, gpointer data);
 static void status_icon_menu_activate (GtkStatusIcon *status_icon, guint button, guint activate_time, gpointer user_data);
@@ -189,6 +192,7 @@
 static gchar * append_panel_icon_suffix (const gchar * icon_name);
 static void watcher_owner_changed (GObject * obj, GParamSpec * pspec, gpointer user_data);
 static void theme_changed_cb (GtkIconTheme * theme, gpointer user_data);
+static void activate_target_parent_changed(GtkWidget *menuitem, GtkWidget *old_parent, gpointer   user_data);
 static void sec_activate_target_parent_changed(GtkWidget *menuitem, GtkWidget *old_parent, gpointer   user_data);
 static GVariant * bus_get_prop (GDBusConnection * connection, const gchar * sender, const gchar * path, const gchar * interface, const gchar * property, GError ** error, gpointer user_data);
 static void bus_method_call (GDBusConnection * connection, const gchar * sender, const gchar * path, const gchar * interface, const gchar * method, GVariant * params, GDBusMethodInvocation * invocation, gpointer user_data);
@@ -592,6 +596,7 @@
 	priv->icon_theme_path = NULL;
 	priv->menu = NULL;
 	priv->menuservice = NULL;
+	priv->item_is_menu = TRUE;
 	priv->ordering_index = 0;
 	priv->title = NULL;
 	priv->label = NULL;
@@ -608,6 +613,9 @@
 
 	priv->shorties = NULL;
 
+	priv->activate_target = NULL;
+	priv->activate_enabled = FALSE;
+
 	priv->sec_activate_target = NULL;
 	priv->sec_activate_enabled = FALSE;
 
@@ -686,6 +694,12 @@
 		priv->connection = NULL;
 	}
 
+	if (priv->activate_target != NULL) {
+		g_signal_handlers_disconnect_by_func (priv->activate_target, activate_target_parent_changed, self);
+		g_object_unref(G_OBJECT(priv->activate_target));
+		priv->activate_target = NULL;
+	}
+
 	if (priv->sec_activate_target != NULL) {
 		g_signal_handlers_disconnect_by_func (priv->sec_activate_target, sec_activate_target_parent_changed, self);
 		g_object_unref(G_OBJECT(priv->sec_activate_target));
@@ -1082,8 +1096,16 @@
 		delta = ABS(delta);
 		g_signal_emit(app, signals[SCROLL_EVENT], 0, delta, direction);
 
-	} else if (g_strcmp0(method, "Activate") == 0 ||
-	           g_strcmp0(method, "SecondaryActivate") == 0 ||
+	} else if (g_strcmp0(method, "Activate") == 0) {
+		GtkWidget *menuitem = priv->activate_target;
+		
+		if (priv->activate_enabled && menuitem &&
+		    gtk_widget_get_visible (menuitem) &&
+		    gtk_widget_get_sensitive (menuitem))
+		{
+			gtk_widget_activate (menuitem);
+		}
+	} else if (g_strcmp0(method, "SecondaryActivate") == 0 ||
 	           g_strcmp0(method, "XAyatanaSecondaryActivate") == 0) {
 		GtkWidget *menuitem = priv->sec_activate_target;
 		
@@ -1149,6 +1171,8 @@
 		} else {
 			return g_variant_new("o", "/");
 		}
+	} else if (g_strcmp0(property, "ItemIsMenu") == 0) {
+		return g_variant_new_boolean(priv->item_is_menu);
 	} else if (g_strcmp0(property, "XAyatanaLabel") == 0) {
 		return g_variant_new_string(priv->label ? priv->label : "");
 	} else if (g_strcmp0(property, "XAyatanaLabelGuide") == 0) {
@@ -1541,7 +1565,7 @@
 	g_signal_connect(G_OBJECT(icon), "activate", G_CALLBACK(status_icon_activate), self);
 	g_signal_connect(G_OBJECT(icon), "popup-menu", G_CALLBACK(status_icon_menu_activate), self);
 	g_signal_connect(G_OBJECT(icon), "scroll-event", G_CALLBACK(scroll_event_wrapper), self);
-	g_signal_connect(G_OBJECT(icon), "button-release-event", G_CALLBACK(middle_click_wrapper), self);
+	g_signal_connect(G_OBJECT(icon), "button-release-event", G_CALLBACK(left_middle_click_wrapper), self);
 
 	return icon;
 }
@@ -1567,21 +1591,21 @@
 }
 
 static gboolean
-middle_click_wrapper (GtkWidget *status_icon, GdkEventButton *event, gpointer data)
+left_middle_click_wrapper (GtkWidget *status_icon, GdkEventButton *event, gpointer data)
 {
 	g_return_val_if_fail(IS_APP_INDICATOR(data), FALSE);
 	AppIndicator * app = APP_INDICATOR(data);
 	AppIndicatorPrivate *priv = app->priv;
 
-	if (event->button == 2 && event->type == GDK_BUTTON_RELEASE) {
+	if ((event->button == 1 || event->button == 2) && event->type == GDK_BUTTON_RELEASE) {
 		GtkAllocation alloc;
 		gint px = event->x;
 		gint py = event->y;
 		gtk_widget_get_allocation (status_icon, &alloc);
-		GtkWidget *menuitem = priv->sec_activate_target;
+		GtkWidget *menuitem = event->button == 1 ? priv->activate_target : priv->sec_activate_target;
 
 		if (px >= 0 && px < alloc.width && py >= 0 && py < alloc.height &&
-		    priv->sec_activate_enabled && menuitem &&
+		    ((event->button == 1 && priv->activate_enabled) || priv->sec_activate_enabled) && menuitem &&
 		    gtk_widget_get_visible (menuitem) &&
 		    gtk_widget_get_sensitive (menuitem))
 		{
@@ -1692,7 +1716,7 @@
 	g_signal_handlers_disconnect_by_func(G_OBJECT(self), status_icon_status_wrapper, status_icon);
 	g_signal_handlers_disconnect_by_func(G_OBJECT(self), status_icon_changes, status_icon);
 	g_signal_handlers_disconnect_by_func(G_OBJECT(self), scroll_event_wrapper, status_icon);
-	g_signal_handlers_disconnect_by_func(G_OBJECT(self), middle_click_wrapper, status_icon);
+	g_signal_handlers_disconnect_by_func(G_OBJECT(self), left_middle_click_wrapper, status_icon);
 	gtk_status_icon_set_visible(status_icon, FALSE);
 	g_object_unref(G_OBJECT(status_icon));
 	return;
@@ -1739,6 +1763,15 @@
 }
 
 static void
+activate_target_parent_changed(GtkWidget *menuitem, GtkWidget *old_parent,
+                               gpointer data)
+{
+	g_return_if_fail(IS_APP_INDICATOR(data));
+	AppIndicator *self = data;
+	self->priv->activate_enabled = widget_is_menu_child(self, menuitem);
+}
+
+static void
 sec_activate_target_parent_changed(GtkWidget *menuitem, GtkWidget *old_parent,
                                    gpointer data)
 {
@@ -2135,6 +2168,7 @@
 
   setup_dbusmenu (self);
 
+  priv->activate_enabled = widget_is_menu_child (self, priv->activate_target);
   priv->sec_activate_enabled = widget_is_menu_child (self, priv->sec_activate_target);
 
   check_connect (self);
@@ -2143,6 +2177,28 @@
 }
 
 /**
+ * app_indicator_set_item_is_menu:
+ * @self: The #AppIndicator
+ * @item_is_menu: Whether item supports only menu
+ *
+ * By default app indicator displays a menu on left click. Disabling this feature
+ * allows you to handle left click by your own.
+ */
+void
+app_indicator_set_item_is_menu (AppIndicator *self, gboolean item_is_menu)
+{
+  AppIndicatorPrivate *priv;
+
+  g_return_if_fail (IS_APP_INDICATOR (self));
+
+  priv = self->priv;
+
+  priv->item_is_menu = item_is_menu;
+
+  return;
+}
+
+/**
  * app_indicator_set_ordering_index:
  * @self: The #AppIndicator
  * @ordering_index: A value for the ordering of this app indicator
@@ -2164,6 +2220,45 @@
 }
 
 /**
+ * app_indicator_set_activate_target:
+ * @self: The #AppIndicator
+ * @menuitem: (allow-none): A #GtkWidget to be activated on activation
+ *
+ * Set the @menuitem to be activated when an activation event (i.e. a
+ * left-click) is emitted over the #AppIndicator icon/label.
+ *
+ * The @menuitem can be also a complex #GtkWidget, but to get activated when
+ * an activation occurs in the #Appindicator, it must be a visible and
+ * active child (or inner-child) of the #AppIndicator:menu.
+ *
+ * Setting @menuitem to %NULL causes to disable this feature.
+ */
+void
+app_indicator_set_activate_target (AppIndicator *self, GtkWidget *menuitem)
+{
+	g_return_if_fail (IS_APP_INDICATOR (self));
+	AppIndicatorPrivate *priv = self->priv;
+
+	if (priv->activate_target) {
+		g_signal_handlers_disconnect_by_func (priv->activate_target,
+		                                      activate_target_parent_changed,
+		                                      self);
+		g_object_unref(G_OBJECT(priv->activate_target));
+		priv->activate_target = NULL;
+	}
+
+	if (menuitem == NULL) {
+		return;
+	}
+
+	g_return_if_fail (GTK_IS_WIDGET (menuitem));
+
+	priv->activate_target = g_object_ref(G_OBJECT(menuitem));
+	priv->activate_enabled = widget_is_menu_child(self, menuitem);
+	g_signal_connect(menuitem, "parent-set", G_CALLBACK(activate_target_parent_changed), self);
+}
+
+/**
  * app_indicator_set_secondary_activate_target:
  * @self: The #AppIndicator
  * @menuitem: (allow-none): A #GtkWidget to be activated on secondary activation
@@ -2455,6 +2550,22 @@
 }
 
 /**
+ * app_indicator_get_activate_target:
+ * @self: The #AppIndicator object to use
+ *
+ * Gets the menuitem being called on activate event.
+ *
+ * Returns: (transfer none): A #GtkWidget object or %NULL if none has been set.
+ */
+GtkWidget *
+app_indicator_get_activate_target (AppIndicator *self)
+{
+	g_return_val_if_fail (IS_APP_INDICATOR (self), NULL);
+
+	return GTK_WIDGET(self->priv->activate_target);
+}
+
+/**
  * app_indicator_get_secondary_activate_target:
  * @self: The #AppIndicator object to use
  *
--- a/src/app-indicator.h	2012-07-11 21:28:34.415113869 +0400
+++ b/src/app-indicator.h
@@ -271,6 +271,8 @@
                                                                   const gchar        *icon_desc);
 void                            app_indicator_set_menu           (AppIndicator       *self,
                                                                   GtkMenu            *menu);
+void                            app_indicator_set_item_is_menu   (AppIndicator       *self,
+                                                                  gboolean            item_is_menu);
 void                            app_indicator_set_icon           (AppIndicator       *self,
                                                                   const gchar        *icon_name);
 void                            app_indicator_set_icon_full      (AppIndicator       *self,
@@ -283,6 +285,8 @@
                                                                   const gchar        *icon_theme_path);
 void                            app_indicator_set_ordering_index (AppIndicator       *self,
                                                                   guint32             ordering_index);
+void                            app_indicator_set_activate_target(AppIndicator       *self,
+                                                                  GtkWidget          *menuitem);
 void                            app_indicator_set_secondary_activate_target (AppIndicator *self,
                                                                              GtkWidget    *menuitem);
 void                            app_indicator_set_title          (AppIndicator       *self,
@@ -303,6 +307,7 @@
 const gchar *                   app_indicator_get_label                (AppIndicator *self);
 const gchar *                   app_indicator_get_label_guide          (AppIndicator *self);
 guint32                         app_indicator_get_ordering_index       (AppIndicator *self);
+GtkWidget *                     app_indicator_get_activate_target      (AppIndicator *self);
 GtkWidget *                     app_indicator_get_secondary_activate_target (AppIndicator *self);
 
 /* Helpers */
--- a/src/gen-notification-item.xml.c
+++ b/src/gen-notification-item.xml.c
@@ -16,6 +16,7 @@
 "		     to find the icons specified above. -->\n"
 "		<property name=\"IconThemePath\" type=\"s\" access=\"read\" />\n"
 "		<property name=\"Menu\" type=\"o\" access=\"read\" />\n"
+"		<property name=\"ItemIsMenu\" type=\"b\" access=\"read\" />\n"
 "		<property name=\"XAyatanaLabel\" type=\"s\" access=\"read\" />\n"
 "		<property name=\"XAyatanaLabelGuide\" type=\"s\" access=\"read\" />\n"
 "		<property name=\"XAyatanaOrderingIndex\" type=\"u\" access=\"read\" />\n"
--- a/src/notification-item.xml
+++ b/src/notification-item.xml
@@ -15,6 +15,7 @@
 		     to find the icons specified above. -->
 		<property name="IconThemePath" type="s" access="read" />
 		<property name="Menu" type="o" access="read" />
+		<property name="ItemIsMenu" type="b" access="read" />
 		<property name="XAyatanaLabel" type="s" access="read" />
 		<property name="XAyatanaLabelGuide" type="s" access="read" />
 		<property name="XAyatanaOrderingIndex" type="u" access="read" />
